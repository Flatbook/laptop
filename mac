#!/bin/sh

# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

SHELL_CHANGES=() # This is the list of environment variables/source commands to
                 # present to the user if they pass -Z.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_shellrc() {
  local text="$1"

  SHELL_CHANGES+=("$text")
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# shellcheck disable=SC2016
append_to_shellrc 'export PATH="$HOME/.bin:$PATH"'
PATH="$HOME/.bin:$PATH" # For the current session as well

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS \
    'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

  append_to_shellrc '# recommended by brew doctor'

  # shellcheck disable=SC2016
  append_to_shellrc 'export PATH="/usr/local/bin:$PATH"' 1

  PATH="/usr/local/bin:$PATH" # For the current session as well
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151

read -r -d '' BREW_BUNDLE_FILE <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "caskroom/cask"

# Unix
brew "universal-ctags", args: ["HEAD"]
brew "git"
brew "openssl"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"

# Heroku
brew "heroku"
brew "parity"

# Image manipulation
brew "imagemagick"

# Testing
brew "qt@5.5" if MacOS::Xcode.installed?

# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
brew "gpg"
brew "yarn"
cask "gpg-suite"

# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed

# Testing Support
cask "chromedriver"
EOF

echo "${BREW_BUNDLE_FILE}" | brew bundle --file=-

if brew list | grep --silent "qt@5.5"; then
  fancy_echo "Symlink qmake binary to /usr/local/bin for Capybara Webkit..."
  brew unlink qt@5.5
  brew link --force qt@5.5
fi

fancy_echo "Update heroku binary..."
brew unlink heroku
brew link --force heroku

fancy_echo "Configuring asdf version manager..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.3.0
  append_to_shellrc "source $HOME/.asdf/asdf.sh" 1
  . $HOME/.asdf/asdf.sh # For the current session as well
else
  append_to_shellrc "source $HOME/.asdf/asdf.sh" 1
  . $HOME/.asdf/asdf.sh # For the current session as well
fi

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

# shellcheck disable=SC1090

fancy_echo "Installing asdf plugins for ruby and node"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
# Import the Node.js release team's OpenPGP keys to main keyring
~/.asdf/plugins/nodejs/bin/import-release-team-keyring

install_asdf_language() {
  local language="$1"
  local version="$2"
  if [ -z  "$version" ]; then
    version="$(asdf list-all "$language" | tail -1)"
  fi

  asdf install "$language" "$version"
  asdf global "$language" "$version"
}

fancy_echo "Installing latest Ruby..."
install_asdf_language "ruby" "2.4.1"
gem update --system
gem_install_or_update "bundler"
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node..."
install_asdf_language "nodejs" "9.2.0"

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

fancy_echo "Script complete!"
fancy_echo ""
fancy_echo "=============================================="
fancy_echo ""
# Ok, there's some incongruence around bash(1) here.
# On Linux:
#   .bash_profile is executed for login shells, and
#   .bashrc is called for interactive non-login shells.
# In macOS, Terminal (and every other macOS terminal emulator)
#   always starts bash as a login shell (thus it always calls .bash_profile).
if [[ $(uname -s) = 'Darwin' ]]; then
    fancy_echo "Please add the following to your shell rc (.zshrc, .bash_profile, etc):"
else
    fancy_echo "Please add the following to your shell rc (.zshrc, .bashrc, etc):"
fi
echo ""
for line in "${SHELL_CHANGES[@]}"; do
    echo $line;
done
